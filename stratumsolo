#!/usr/bin/perl

# Copyright (c) 2019 ChileBob : Released under MIT Licence

use strict;

use POSIX 'strftime';
use IO::Handle;
use IO::Socket;
use IO::Select;
use JSON;					
use HTTP::Request;					
use Digest::SHA qw(sha256);
use Data::Dumper;

$SIG{INT} = \&shutdown;						# graceful shutdown, sends disconnect to all miners

my $version = "v0.1";						# Current version, because everything should have one of those

my $config;							# These configs can be changed from the command line
$config->{'debug'}    = 1;					# debugging, turned on by default
$config->{'port'}     = 3334;					# default listening port number
$config->{'password'} = '';					# default miner password

my $conf;							# Config settings that cant be changed via command line
$conf->{'nonce1_size'} = 16;					# this leaves 8 bytes of nonce for the miner to work through, its a lot!
$conf->{'miner_timeout'} = 60;					# block timeout, work is resent to miners after this many seconds so they dont timeout
$conf->{'block_start'} = 0;					# starting block for this session
$conf->{'node_state'} = 1;					# node status, 1 = up, 0 = down
$conf->{'node_check'} = 0;					# epoch of last time node was checked for new blocks
$conf->{'blocksize'} = 2 * 1024 * 1024;				# maximum block size (2Mb)

my $block;							# hash for storing templates
my $work;							# mining work

debug ("starting....");

#####################################################################################################################################################################################################
# START THE DAEMON
#####################################################################################################################################################################################################

my $lsn = IO::Socket::INET->new (									# open network socket (non blocking)
	LocalPort => "$config->{'port'}",
	Proto => 'tcp',
	Listen => SOMAXCONN,										# allow maximum number of connections (65535), which is silly
	Reuse => 1,
	Blocking => 0
);
die "FATAL: Cannot create socket on port $config->{'port'}\n" unless $lsn;				# die if we cant open a socket (ie: daemon already running)

my $sel = IO::Select->new($lsn);									# list of sockets that we listen to 
my $running = 1;											# runtime flag

my $client;												# hash of hashes, client network config goes here
my %client;
my $client_number = 0;
my $client_info;

$block->{'current'}->{'height'} = 0;									# start condition, lets pretend we're at block 0

while($running) {											# main loop

	my @ready = $sel->can_read(0);									# get all active sockets with something to say
	my @total = $sel->can_write(0);									# get all active sockets with something to say

	my $miners_connected = (scalar @total);

	if (@ready) {

		foreach my $fh (@ready) {
			if ($fh == $lsn) {								# master socket, accepts new connections
				debug("client connecting");
				my $new = $lsn->accept;							# accept the connection
				$sel->add($new);							# add connection to active list
				$client->{$new->fileno} = $client_number;				# track the client by connecting socket

				$client_info->{$client_number}->{'fileno'} = $new->fileno;			# file handler
				$client_info->{$client_number}->{'ipaddr'} = $new->peerhost;			# client IP address
				$client_info->{$client_number}->{'auth'} = 0;					# 1 = authorized, 0 = idle
				$client_info->{$client_number}->{'mining'} = 0;					# 1 = mining, 0 = idle
				$client_info->{$client_number}->{'ready'} = 0;					# 1 = mining, 0 = idle
				$client_info->{$client_number}->{'block'} = 0;					# blocknumber sent to miner
				$client_info->{$client_number}->{'nonce1_size'} = $conf->{'nonce1_size'};	# default size of nonce1
				$client_info->{$client_number}->{'nonce1'}  = sprintf("%04x", $client_number) . newkey($client_info->{$client_number}->{'nonce1_size'} - 4);	
				$client_info->{$client_number}->{'updated'} = time;				# time of last update

				$client_number++;							# increment client index number for next client
			}
			else {										# client socket
				my $id = $client->{$fh->fileno};					# get client index id
				my $buf = <$fh>;

				debug("$id : RECV $buf");						# log what the miner sent to us

				if($buf) {							
					my $req = decode_request($buf);					# decode the client input & screen for garbage
					if ($req) {

						debug("$id : $req->{'method'}");

						if ($req->{'method'} eq 'mining.subscribe') {		# connect to server
							$client_info->{$id}->{'id'}  	  = $req->{'id'};
							$client_info->{$id}->{'software'} = $req->{'params'}[0];		# clients mining software
							$client_info->{$id}->{'port'}     = $req->{'params'}[3];		# connecting port number
							write_client($fh, "\{\"id\":$req->{'id'},\"result\":\[null,\"$client_info->{$id}->{'nonce1'}\"\],\"error\":null\}\n");
						}

						elsif ($req->{'method'} eq 'mining.authorize') {				# authorize client (we say yes to everyone!)
							$client_info->{$id}->{'auth'} = 1;				# 1 = authorized, 0 = idle
							write_client($fh, "\{\"id\":$req->{'id'},\"result\": true,\"error\": null}\n");	# success
						}

						elsif ($req->{'method'} eq 'mining.extranonce.subscribe') {				# request a nonce? or just let us know that it can do that?
							$client_info->{$id}->{'mining'} = 0;						# tag miner as done so it gets a new job
							$client_info->{$id}->{'ready'}  = 0;						# tag miner as not ready so it gets a new target
							write_client($fh, "\{\"id\":$req->{'id'},\"result\": true,\"error\": null}\n");	# success
						}
	
						elsif ($req->{'method'} eq 'mining.submit') {						# submitting work
							$client_info->{$id}->{'mining'} = 0;						# tag miner as done so it gets a new job
							$client_info->{$id}->{'ready'}  = 0;						# tag miner as not ready so it gets a new target

							my $rawblock = $work->{'version'};
							$rawblock .= $work->{'previousblockhash'};				# previousblockhash (NOT REVERSED)
							$rawblock .= $work->{'merkleroot'};					# merkleroot (NOT REVERSED)
							$rawblock .= $work->{'finalsaplingroothash'};				# saplingroot (NOT REVERSED)
							$rawblock .= $req->{'params'}[2];					# timestamp, 32-bit little-endian, as received from miner
							$rawblock .= $work->{'bits'};						# bits (NOT REVERSED)
							$rawblock .= "$client_info->{$id}->{'nonce1'}$req->{'params'}[3]";	# nonce (NOT REVERSED)
							$rawblock .= $req->{'params'}[4];					# solution, as received from miner
							$rawblock .= $work->{'transactions'};	 				# add coinbase transaction

							my $resp = node_rpc("submitblock $rawblock");		# submit the block
							my $eval = eval { decode_json($resp) };			# test for valid json response from server
							if ($@) {						# it was garbage
								
								if ($resp eq 'inconclusive') {
									debug("$id : inconclusive");
									write_client($fh, "\{\"id\":$req->{'id'},\"result\": false\}\n");	# reject work
								}
								elsif ($resp eq 'invalid-solution') {
									debug("$id : invalid_solution");
									write_client($fh, "\{\"id\":$req->{'id'},\"result\": false\}\n");	# reject work
								}
								elsif ($resp eq 'high-hash') {
									debug("$id : high-hash");
									write_client($fh, "\{\"id\":$req->{'id'},\"result\": false\}\n");	# reject work
								}
								elsif ($resp eq '') {								# node accepts work quietly, it doesnt return a status
									debug("$id : BLOCK FOUND ");
									write_client($fh, "\{\"id\":$req->{'id'},\"result\": true\}\n");	# success??? tell the miner it was OK even though the node didnt confirm
								}

								else {
									debug("$id : ERROR: node_rpc said : $resp");
									write_client($fh, "\{\"id\":$req->{'id'},\"result\": false\}\n");	# failure??? node complained but we didnt understand
								}
							}
							else {											# it was json, so decode & return	

								my $response = decode_json($resp);					

								if ($response->{'content'}->{'result'}->{'height'} == ($block->{'current'} + 1) ) {	# WE MINED A BLOCK & have the template for the next one !
									$block->{'current'} = $response->{'content'}->{'result'};
									write_client($fh, "\{\"id\":$req->{'id'},\"result\": true\}\n");		# success??? tell the miner it was OK
									debug("$id : BLOCK ACCEPTED!!");
								}
								else {
									write_client($fh, "\{\"id\":$req->{'id'},\"result\": false\}\n");
									debug("$id : BLOCK REJECTED!!");
								}
							}
						}
	
						else {
							debug("$id : ERROR: UNKNOWN STRATUM REQUEST");
							disconnect_client($fh);
						}
					}
					else {											# garbage (not valid JSON) from so we'll disconnect it
						debug("$id : WARNING: GARBAGE JSON REQUEST : $buf");
						disconnect_client($fh);
					}
				}
				else {												# disconnect client
					disconnect_client($fh);
				}
			}
		}
	}
	else {														# nothing to do, so sleep a while to avoid beating up the server
		select(undef, undef, undef, 0.05);									# 50 millisecond power-nap :-)
	}

	my $flag_newblock = 0;												# clear the newblock flag

	$conf->{'node_state'} = 1;											# assume node is up

	if ( (time - $conf->{'node_check'}) > 1) {									# has more than one second passed since the last check
		do { 
			$block->{'template'} = node_rpc('getblocktemplate');						# get a new block template from the node
			if ( ref($block->{'template'}) ne 'HASH') {
				print "Node is down, trying again in 5 seconds\n";
				$conf->{'node_state'} = 0;								# tag node as being down
				sleep(5);
			}
			if ($running == 0) {										# exit if we're killed
				exit(0);
			}

		} while ( ref($block->{'template'}) ne 'HASH');
		$conf->{'node_check'} = time;										# reset node_check to current time
	}

	if ($conf->{'node_state'} == 0) {										# if zero the node was down for a while, restart all miners
		$flag_newblock = 1;
		restart_miners();
	}

	if ($conf->{'block_start'} == 0) {										# log block height for session start
		$conf->{'block_start'} = $block->{'template'}->{'height'};			
		$flag_newblock = 1;
	}

	if ( $block->{'template'}->{'height'} != $block->{'current'}->{'height'} ) {					# new block arrived, send new work
		$flag_newblock = 1;
	}

	if ( ($block->{'template'}->{'target'} ne $block->{'current'}->{'target'}) ) {					# block target has changed, send new work
		$flag_newblock = 1;
	}

	if ( ($block->{'template'}->{'finalsaplingroothash'} ne $block->{'current'}->{'finalsaplingroothash'}) ) {	# node saplingroot changed, send new work
		$flag_newblock = 1;
	}

	if ($flag_newblock == 1) {											# force all miners to start a new job
		$block->{'current'} = $block->{'template'};								# use the fresh block template
		new_work();												# generate new work

		@ready = $sel->can_write(0);										# get all connected miners
		foreach my $fh (@ready) {						
			if ($fh != $lsn) {										# ensure we're only talking to clients
				if ($flag_newblock) {
					my $id = $client->{$fh->fileno};						# get client index id
					$client_info->{$id}->{'mining'} = 0;						# tag as idle
					$client_info->{$id}->{'ready'}  = 0;						# tag as needing a target update
				}
			}
		}
	}

	my @active = $sel->can_write(0);										# get all active sockets 
	if (@active) {													# send work/updates to all miners

		foreach my $fh (@active) {						
			if ($fh != $lsn) {										# ensure we're only talking to clients

				my $id = $client->{$fh->fileno};							# get client index id

				if ( ($client_info->{$id}->{'mining'} == 0) && ($client_info->{$id}->{'ready'} == 1) && ($client_info->{$id}->{'auth'} == 1) ) {	

					debug("$id : new work");
					write_client($fh, "\{\"id\":null,\"method\":\"mining.notify\",\"params\":\[\"$work->{'worknumber'}\",\"$work->{'version'}\",\"$work->{'previousblockhash'}\",\"$work->{'merkleroot'}\",\"$work->{'finalsaplingroothash'}\",\"$work->{'time'}\",\"$work->{'bits'}\",true,\"ZcashPoW\"\]\}\n");	

					$client_info->{$id}->{'mining'} = 1;						# tag miner as mining
				}

				# miner is working on an old block, set the current target & tag as idle so it gets the next update
				#
				elsif ( ($client_info->{$id}->{'mining'} == 1) && ($work->{'blocknumber'} != $block->{'current'}->{'height'}) ) {

					debug("$id : resetting target, ready");
					write_client($fh, "\{\"id\":null,\"method\":\"mining.set_target\",\"params\":\[\"$block->{'current'}->{'target'}\"\]\}\n");
					$client_info->{$id}->{'target'} = $block->{'current'}->{'target'};		# cache target
					$client_info->{$id}->{'mining'} = 0;						# tag as idle
					$client_info->{$id}->{'ready'}  = 1;						# tag as needing fresh target
				}

				# miner is authenticated but not ready, set the work target
				#
				elsif ( ($client_info->{$id}->{'mining'} == 0) && ($client_info->{$id}->{'ready'} == 0) && ($client_info->{$id}->{'auth'} == 1 ) ) {
					debug("$id : setting target");
					write_client($fh, "\{\"id\":null,\"method\":\"mining.set_target\",\"params\":\[\"$block->{'current'}->{'target'}\"\]\}\n");
					$client_info->{$id}->{'target'} = $block->{'current'}->{'target'};		# cache target
					$client_info->{$id}->{'ready'} = 1;						# tag miner as ready
				}

				elsif ( ($client_info->{$id}->{'mining'} == 1) && ((time - $client_info->{$id}->{'updated'}) > $conf->{'miner_timeout'}) ) {	# refresh current job to prevent timeout
					debug("$id : refreshing work");

					write_client($fh, "\{\"id\":null,\"method\":\"mining.notify\",\"params\":\[\"$work->{'worknumber'}\",\"$work->{'version'}\",\"$work->{'previousblockhash'}\",\"$work->{'merkleroot'}\",\"$work->{'finalsaplingroothash'}\",\"$work->{'time'}\",\"$work->{'bits'}\",false,\"ZcashPoW\"\]\}\n");	
				}
			}
		}
	}
}

disconnect_all();									# disconnect all clients before we shutdown
print "\nBye!\n";
exit;								


sub decode_request {

	my $eval = eval { decode_json($_[0]) };						# test for valid json string
	if ($@) {									# it was garbage
		return(0);
	}
	else {										# it was json, so decode & return	
		return(decode_json($_[0]));					
	}
}

sub node_rpc {
	
	my $resp = `ycash-cli $_[0] 2>&1`;						# call rpc client, which MUST be in the path

	my $eval = eval { decode_json($resp) };						# test for valid json response from server
	if ($@) {									# it was garbage	
	}
	else {
		return(decode_json($resp));
	}
}

sub newkey {	

	my $length = $_[0] * 2;	
	my @chars = ();
	my $key = '';

	@chars = ('a'..'f', '0'..'9');
	$key .= $chars[rand @chars] for 1..$length;			
	return($key);
}

sub int_to_hex {									# returns hex : uint32_le = int_to_hex(integer, 32, 'r')

	my $places = $_[1] / 4;								# length of hex (bytes)
	my $template = "\%0$places" . 'x';						# template for sprintf conversion
	my $hex = sprintf("$template", $_[0]);						# convert integer to hex

	if ($_[2] eq 'r') {								# reverse byte order
		return(reverse_bytes($hex));
	}
	return($hex);									# given byte order
}

sub reverse_bytes {									# reverse byte order of hex-encoded string
	my $hex = '';
	my $bytes = length($_[0]);
	while ($bytes > 0) {
		$hex .= substr($_[0], ($bytes - 2), 2);
		$bytes -= 2;
	}
	return($hex);
}

sub compact_size {									# generate compactSize string from integer (or hex-encoded data if $_[2] = 's'

	my $length;
	my $compact = '';

	if ($_[1] eq 's') {
		$length = length($_[0]) / 2;						# hex string, convert to length in bytes
	}
	else {										# integer 
		$length = $_[0];
	}

	if ($length < 253) {								# 8-bit
		$compact = sprintf("%02x", $length);
	        return($compact);
	}
	elsif ( ($length >= 253) && ($length <= 65535) ) {				# 16-bit, little-endian
		$compact = sprintf("%04x", $length);
		$compact = reverse_bytes($compact);
		return("fd$compact");
	}
	elsif ( ($length > 65556) && ($length <= 4294967295)) {				# 32-bit, little-endian
		$compact = sprintf("%08x", $length);
		$compact = reverse_bytes($compact);
		return("fe$compact");
	}
	else {										# 64-bit, little-endian
		$compact = sprintf("%016x", $length);
		$compact = reverse_bytes($compact);
		return("ff$compact");
	}
}

sub merkleroot {									# generate merkleroot from array-ref of transaction ids

	my @hashes = ();

	foreach (@{$_[0]}) {								# dereference, data is hex-encoded
		push @hashes, $_;							# txids are little-endian
	}

	if ( (scalar @hashes) == 1 ) {							# if its an empty block (1 tx)
		return($hashes[0]);							# return coinbase txn hash as merkleroot
	}

	while ((scalar @hashes) > 1) {							# loop through array until there's only one value left

		if ( ((scalar @hashes) % 2) != 0 )  {					# duplicate last hash if there's an odd number
			push @hashes, $hashes[((scalar @hashes) - 1)];
		}

		my @joinedHashes;

		while (my @pair = splice @hashes, 0, 2) {						# get a pair of hashes
			push @joinedHashes, hash_this(reverse_bytes("$pair[1]$pair[0]"), 'le');		# get the hash
		}
		@hashes = @joinedHashes;						# replace hashes with joinedHashes
	}

	return($hashes[0]);								# return hex-encoded big-endian
}

sub new_work() {								# generate new mining task, all miners get the same task 

	my @txid  = ();
	my @txraw = ();
	my $blocksize = $conf->{'headersize'};				

	$work->{'blocknumber'} = $block->{'current'}->{'height'};						# cache block number

	$work->{'transaction_count'} = 1;									# coinbase txn
	$work->{'transactions'} = $block->{'current'}->{'coinbasetxn'}->{'data'};				# coinbase always goes first
	push @txid, hash_this($block->{'current'}->{'coinbasetxn'}->{'data'}, 'le');				# coinhase hash
	$blocksize += length($block->{'current'}->{'coinbasetxn'}->{'data'}) / 2;				# add size of coinbase txn

	foreach my $tx ( @{$block->{'current'}->{'transactions'}} ) {						# add remaining transactions

		my $txn_size = length($tx->{'data'}) / 2;							# get txn size (bytes)

		if ( ($blocksize + $txn_size) < $conf->{'blocksize'}) {
			$work->{'transaction_count'}++;								# increment count
			$blocksize += $txn_size;								# add txn size
			$work->{'transactions'} .= $tx->{'data'};						# append txn data
			push @txid, $tx->{'hash'};								# add txn hash
		}
		else {												# full block, no more txns
			last;
		}
	}

	$work->{'merkleroot'}           = reverse_bytes(merkleroot(\@txid));					# generate merkleroot from array of txn hashes
	$work->{'transactions'}         = compact_size($work->{'transaction_count'}) . $work->{'transactions'};	# compactSize of transaction count
	$work->{'target'}               = $block->{'current'}->{'target'};					# target (NOT REVERSED)
	$work->{'version'}              = int_to_hex($block->{'current'}->{'version'}, 32, 'r');		# version (REVERSED)
	$work->{'previousblockhash'}    = reverse_bytes($block->{'current'}->{'previousblockhash'});		# previous block hash (REVERSED)
	$work->{'finalsaplingroothash'} = reverse_bytes($block->{'current'}->{'finalsaplingroothash'});		# sapling root (REVERSED)
	$work->{'time'}                 = int_to_hex(time, 32, 'r');						# current timestamp, 32-bit, reversed (CONFIRMED)
	$work->{'bits'}                 = reverse_bytes($block->{'current'}->{'bits'});				# bits (REVERSED)

	++$work->{'worknumber'};										# increment clients work number
	debug("new work : $work->{'worknumber'}");
}

sub hash_this {													# returns a sha256(sha256)) hash with optionial endian-ness

	if ($_[1] eq 'le') {
		return(reverse_bytes(unpack("H*", sha256(sha256(pack "H*", $_[0])))));				# little-endian
	}
	elsif ($_[1] eq 'be') {											# big-endian
		return(unpack("H*", sha256(sha256(pack "H*", $_[0]))));			
	}
}

sub debug {

	open (DEBUG, ">>/tmp/stratumsolo.log");
	if ($config->{'debug'} > 0) {										# print the message (debug = 1)
		print DEBUG "$_[0]\n";
	}
	close (DEBUG);
}

sub restart_miners {

	debug("restarting all miners");
	my @miner = $sel->can_write(0);										# get all active sockets with something to say
	if (@miner) {
		foreach my $fh (@miner) {
			if ($fh != $lsn) {									# leave the master socket
				my $id = $client->{$fh->fileno};						# get client index id
				$client_info->{$id}->{'mining'} = 0;						# tag as idle
				$client_info->{$id}->{'ready'}  = 0;						# tag as needing a target update
			}
		}
	}
}

sub disconnect_all {

	debug("disconnecting all miners");
	my @miner = $sel->can_write(0);										# get all active sockets with something to say

	if (@miner) {
		foreach my $fh (@miner) {
			if ($fh != $lsn) {									# leave the master socket
				disconnect_client($fh);
			}
		}
	}
}

sub restart_all {									# reset all connected miners

	debug("restarting all miners");
	my @miner = $sel->can_write(0);							# get all active sockets with something to say

	if (@miner) {
		foreach my $fh (@miner) {
			if ($fh != $lsn) {						# leave the master socket
				my $id = $client->{$fh->fileno};			# get client index id

				if ($client_info->{$id}->{'auth'} = 1) {
					$client_info->{$id}->{'mining'} = 0;		# tag not mining
					$client_info->{$id}->{'ready'} = 0;		# tag not targetted
				}
			}
		}
	}
}

sub disconnect_client {

	my $id = $client->{$_[0]->fileno};						# get client index id

	debug("$id : disconnected");

	delete $client->{$_[0]->fileno};						# remove from connection hash
	delete $client_info->{$id};							# remove from client info hash
	$sel->remove($_[0]);								# remove from active connections

	$_[0]->shutdown(2);								# shutdown clients socket
}

sub write_client {

	my ($fh, $json) = @_;
#	debug("$client->{$fh->fileno} : SEND: $json");

	$fh->write($json);
	$client_info->{ $client->{$fh->fileno} }->{'updated'} = time;			# reset updated timestamp
}

sub shutdown {
	$running = 0;
}

